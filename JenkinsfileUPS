final FAILURE = '#FF0000'

def definePackageName() {
    if (params.PRODUCTION) {
    	return "${env.BRANCH_NAME}-${env.BUILD_NUMBER}"
    }
    return "${env.BRANCH_NAME}-dev-${env.BUILD_NUMBER}"
}


pipeline {
    agent { label "UPSTREAM" }

    options {
        buildDiscarder(logRotator(daysToKeepStr: '30', artifactNumToKeepStr: '2'))
        disableConcurrentBuilds()
    }

    parameters {
        string(defaultValue: '/scratch/www/local/ceph-ansible', description: 'Path to package repo server ' +
                'branch added automatically', name: 'WWW_ROOT')
    }

    environment {
	// This is phony build; all we want to do is
	// tar up our ceph-ansible branch so that it untars
	// under a directory named ${RELEASE_NAME}. To do this
	// a symlik is created in ${WORK_DIR} that points
	// back to ${WORKSPACE} and then we tar with --dereference
        //	
	RELEASE_PREFIX = "ceph-ansible-${env.BRANCH_NAME}"
	RELEASE_NAME = "${env.RELEASE_PREFIX}-${env.BUILD_NUMBER}"
	TAR_NAME = "${env.RELEASE_NAME}.tgz"
	WORK_DIR = "/tmp/ceph-ansible_work/${env.BRANCH_NAME}"

	WWW_DST_DIR = "${params.WWW_ROOT}/${env.BRANCH_NAME}"
	WWW_TOKEEP = "16" // +1 actual kept
    }
    stages {
        stage('Clean') {
            steps {
                sh "sudo rm -fr ${env.WORK_DIR}"
		sh "sudo git clean -xdf"
                sh "sudo mkdir -p ${env.WORK_DIR}"
                sh "sudo chmod -R 777 ${env.WORK_DIR}"
            }
        }
	
        stage('SymLinkCephAnsible') {
            steps {
                   sh "cd ${env.WORK_DIR} && ln -s ${WORKSPACE} ${env.RELEASE_NAME}"
            }
        }

        stage('Archive') {
            steps {
                sh "sudo mkdir -pm 777 ${env.WWW_DST_DIR}/ || true"
                sh "sudo tar -czvf ${env.WWW_DST_DIR}/${env.TAR_NAME} -C ${env.WORK_DIR} --exclude-vcs --dereference ${env.RELEASE_NAME}"
                sh "sudo chmod 664 ${env.WWW_DST_DIR}/${env.TAR_NAME}"

                dir("${WWW_DST_DIR}") {
                    sh "rm -f latest*"
                    sh "ln -s ${env.TAR_NAME} latest"
                    sh "echo ${env.TAR_NAME} > latest.txt"
                    sh "sudo chmod 666 latest.txt"
                }
		sh "sudo rm -fr ${env.WWW_DST_DIR}@tmp"
            }
        }

        stage('ArtifactClean') {
            steps {
                sh "sudo ls -1t ${env.WWW_DST_DIR}/${env.RELEASE_PREFIX}*.tgz| tail -n +${env.WWW_TOKEEP} | xargs rm -f"
            }
        }

        stage('PostClean') {
            steps {
                sh "sudo rm -fr ${env.WORK_DIR}"
            }
        }
    }
}
